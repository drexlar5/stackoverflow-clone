openapi: 3.0.1
info:
  title: stackoverflow clone
  description: This is the simple backend clone for stackoverflow
  contact:
    email: drexlar37@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
tags:
  - name: question
    description: Operations about questions
  - name: answer
    description: Operations about answers
  - name: search
    description: 'Search operations on question, answer and user model'
  - name: user
    description: Operations about user
paths:
  /questions:
    get:
      tags:
        - question
      summary: Fetches all questions in database
      operationId: getQuestions
      parameters:
        - name: page
          in: query
          description: page number
          schema:
            type: integer
        - name: perPage
          in: query
          description: number of results per page
          schema:
            type: integer
      responses:
        '200':
          description: Questions fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
              example: |-
                    {
                            "message": "Questions fetched successfully",
                            "data": [
                                {
                                    "vote": 0,
                                    "answersCount": 2,
                                    "answers": [
                                        {
                                            "_id": "5ee18daebbde45065cac7acc",
                                            "user": {
                                                "_id": "5ee0cebe9228d10a954780d5",
                                                "firstname": "Mary",
                                                "lastname": "Ogbonna",
                                                "username": "Mary"
                                            },
                                            "comment": "A test answer"
                                        },
                                        {
                                            "_id": "5ee18e60d872e10693480881",
                                            "user": {
                                                "_id": "5ee0cebe9228d10a554740k7",
                                                "firstname": "Daniel",
                                                "lastname": "Godstime",
                                                "username": "Daniel"
                                            },
                                            "comment": "Alternative test answer"
                                        }
                                    ],
                                    "isSubscribed": true,
                                    "_id": "5ee1366819866227a38faebc",
                                    "title": "a random question",
                                    "content": "a random test question",
                                    "creator": {
                                        "_id": "5ee0cebe9228d10a554780f3",
                                        "firstname": "Michael",
                                        "lastname": "Agboola",
                                        "username": "devguy"
                                    },
                                    "createdAt": "2020-06-10T19:37:12.076Z",
                                    "updatedAt": "2020-06-11T01:52:32.067Z",
                                    "__v": 2
                                }
                            ],
                            "total": 1
                        }
        '500':
          description: 'Error occured, could not fetch question.'
          content:   
            application/json:
              example: |-
                    {
                        "message": "Error occured, could not fetch question."
                    }
  /question:
    post:
      tags:
        - question
      summary: Add a new question to the database
      operationId: createQuestion
      requestBody:
        description: Question object that is to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
            example:
              title: a random question
              content: a random test question
        required: true
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              example: |2-
                        {
                            "message": "Question created successfully",
                            "data": {
                                "question": {
                                    "vote": 0,
                                    "answersCount": 0,
                                    "answers": [],
                                    "isSubscribed": false,
                                    "_id": "5ee58edb8f8b9f02a5a8604b",
                                    "title": "a random question",
                                    "content": "a random test question",
                                    "creator": "5ee0cebe9228d10a554780f3",
                                    "createdAt": "2020-06-14T02:43:39.359Z",
                                    "updatedAt": "2020-06-14T02:43:39.359Z",
                                    "__v": 0
                                },
                                "creator": {
                                    "_id": "5ee0cebe9228d10a554780f3",
                                    "name": "Michael Agboola"
                                }
                            }
                        }
        '401':
          description: 'Error occured, could not find user.'
          content:   
            application/json:
              example: |-
                    {
                        "message": "Not authenticated."
                    }
        '422':
          description: 'Data entered is incorrect.'
          content:   
            application/json:
              example: |-
                    {
                        "message": "Validation failed, data entered is incorrect."
                    }
        '500':
          description: 'Unable to create question.'
          content:   
            application/json:
              examples:
                serverError:
                  value: |1-
                    {
                        "message": "Error occured, could not create question."
                    }
                jwtError:
                  value: |2-
                      {
                        "message": "jwt expired"
                      }
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /vote:
    patch:
      tags:
        - question
      summary: Updates the vote field of the question model
      operationId: voteQuestion
      requestBody:
        description: Question object that needs to be udated in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
            example:
              vote: up
              questionId: 5ee58edb8f8b9f02a5a8604b
        required: true
      responses:
        '201':
          description: Vote updated successfully
          content:
            application/json:
              example: |-
                        {
                            "message": "Vote updated successfully",
                            "data": 1
                        }
        '500':
          description: 'Unable to update vote.'
          content:   
            application/json:
              examples: 
                serverError:
                  value: |1-
                    {
                        "message": "Error occured, could not update vote."
                    }
                jwtError:
                  value: |2-
                      {
                        "message": "jwt expired"
                      }
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /subscribe:
    patch:
      tags:
        - question
      summary: Updates the isSubscribed field of the question model
      operationId: subscribeToQuestion
      requestBody:
        description: Question object that needs to be updated in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
            example:
              questionId: 5ee58edb8f8b9f02a5a8604b
              isSubscribed: true
        required: true
      responses:
        '201':
          description: User subcribed to question successfully.
          content:
            application/json:
              example: |-
                    {
                        "message": "User subcribed to question successfully.",
                        "data": {
                            "vote": 1,
                            "answersCount": 0,
                            "answers": [],
                            "isSubscribed": true,
                            "_id": "5ee58edb8f8b9f02a5a8604b",
                            "title": "a random question",
                            "content": "a random test question",
                            "creator": "5ee0cebe9228d10a554780f3",
                            "createdAt": "2020-06-14T02:43:39.359Z",
                            "updatedAt": "2020-06-14T02:46:28.943Z",
                            "__v": 0
                        }
                    }
        '401':
          description: User is not authorized to subscribe for this question
          content:  
            application/json:
              example: |-
                    {
                        "message": "User is not authorized to subscribe for this question."
                    }
        '500':
          description: 'Error occured, could not subscribe user.'
          content: 
            application/json:
              examples:
                serverError:
                  value: |1-
                    {
                        "message": "Error occured, could not subscribe user."
                    }
                jwtError:
                  value: |2-
                      {
                        "message": "jwt expired"
                      }
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /answers/answer:
    post:
      tags:
        - answer
      summary: Posts an answer to a question
      operationId: postAnswer
      requestBody:
        description: Answer object that is to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
            example:
              questionId: 5ee58edb8f8b9f02a5a8604b
              comment: A test answer
        required: true
      responses:
        '200':
          description: Answer successfully created.
          content:
            application/json:
              example: |2-
                        {
                            "message": "Answer successfully created.",
                            "data": {
                                "_id": "5ee591a08f8b9f02a5a8604c",
                                "question": "5ee1366819866227a38faebc",
                                "user": "5ee0cebe9228d10a554780f3",
                                "comment": "A test answer"
                            }
                        }
        '500':
          description: 'Error occured, answer was not created.'
          content: 
            application/json:
              examples:
                serverError:
                  value: |1-
                    {
                        "message": "Error occured, answer was not created."
                    }
                jwtError:
                  value: |2-
                      {
                        "message": "jwt expired"
                      }
      security:
        - api_key: []
      x-codegen-request-body-name: body
  '/search/question/{queryString}':
    get:
      tags:
        - search
      summary: Fetches all questions in database
      operationId: searchQuestion
      parameters:
        - name: queryString
          in: path
          description: search value used to query the database
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page number
          schema:
            type: integer
        - name: perPage
          in: query
          description: number of results per page
          schema:
            type: integer
      responses:
        '200':
          description: Question search successful
          content:
            application/json:
              example: |
                    {
                        "message": "Question search successful",
                        "data": [
                                    {
                                        "vote": 0,
                                        "answersCount": 2,
                                        "answers": [
                                            {
                                                "_id": "5ee18daebbde45065cac7acc",
                                                "user": {
                                                    "_id": "5ee0cebe9228d10a954780d5",
                                                    "firstname": "Mary",
                                                    "lastname": "Ogbonna",
                                                    "username": "Mary"
                                                },
                                                "comment": "A test answer"
                                            },
                                            {
                                                "_id": "5ee18e60d872e10693480881",
                                                "user": {
                                                    "_id": "5ee0cebe9228d10a554740k7",
                                                    "firstname": "Daniel",
                                                    "lastname": "Godstime",
                                                    "username": "Daniel"
                                                },
                                                "comment": "Alternative test answer"
                                            }
                                        ],
                                        "isSubscribed": true,
                                        "_id": "5ee1366819866227a38faebc",
                                        "title": "a random question",
                                        "content": "a random test question",
                                        "creator": {
                                            "_id": "5ee0cebe9228d10a554780f3",
                                            "firstname": "Michael",
                                            "lastname": "Agboola",
                                            "username": "devguy"
                                        },
                                        "createdAt": "2020-06-10T19:37:12.076Z",
                                        "updatedAt": "2020-06-11T01:52:32.067Z",
                                        "__v": 2
                                }
                            ],
                        }
        '500':
          description: 'Error occured, could not fetch question.'
          content:
            application/json:
              example: |-
                    {
                        "message": "Error occured, could not fetch question."
                    }
  '/search/answer/{queryString}':
    get:
      tags:
        - search
      summary: Fetches all questions in database
      operationId: searchAnswer
      parameters:
        - name: queryString
          in: path
          description: search value used to query the database
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page number
          schema:
            type: integer
        - name: perPage
          in: query
          description: number of results per page
          schema:
            type: integer
      responses:
        '200':
          description: Answer search successful
          content:
            application/json:
              example: |-
                        {
                            "message": "Answer search successful",
                            "data": [
                                {
                                    "_id": "5ee0cef29228d10a554780f4",
                                    "question": "5ee0c78f18e043035ae9cb69",
                                    "user": "5ee0cebe9228d10a554780f3",
                                    "comment": "A random test answer",
                                    "__v": 0
                                },
                                {
                                    "_id": "5ee591a08f8b9f02a5a8604c",
                                    "question": "5ee1366819866227a38faebc",
                                    "user": "5ee0cebe9228d10a554780f3",
                                    "comment": "A test answer",
                                    "__v": 0
                                }
                            ]
                        }
        '500':
          description: 'Error occured, could not fetch answer.'
          content: 
            application/json:
              example: |-
                    {
                        "message": "Error occured, could not fetch answer."
                    }
  '/search/user/{queryString}':
    get:
      tags:
        - search
      summary: Fetches all questions in database
      operationId: searchUser
      parameters:
        - name: queryString
          in: path
          description: search value used to query the database
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page number
          schema:
            type: integer
        - name: perPage
          in: query
          description: number of results per page
          schema:
            type: integer
      responses:
        '200':
          description: User search successful
          content:
            application/json:
              example: |
                     {
                            "message": "User search successful",
                            "data": [
                                {
                                    "_id": "5ee0cebe9228d10a554780f3",
                                    "email": "test1@test.com",
                                    "firstname": "Michael",
                                    "lastname": "Agboola",
                                    "username": "devguy"
                                },
                                {
                                    "_id": "5ee58b578f8b9f02a5a8604a",
                                    "email": "test2@test.com",
                                    "firstname": "Bidemi",
                                    "lastname": "Michael",
                                    "username": "pedro"
                                }
                            ]
                        }
        '500':
          description: 'Error occured, could not fetch user.'
          content:
            application/json:
              example: |-
                    {
                        "message": "Error occured, could not fetch user."
                    }
  /auth/signup:
    post:
      tags:
        - user
      summary: Create user
      description: Creates a user profile.
      operationId: signup
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: devguy
              firstname: Michael
              lastname: Agboola
              email: test@test.com
              password: '12345'
        required: true
      responses:
        '201':
          description: User created.
          content:
            application/json:
              example: |-
                        {
                          "message": "User created",
                          "data": "5ee58b578f8b9f02a5a8604a"
                        }
        '422':
          description: Validation failed.
          content:
            application/json:
              example: |-
                    {
                        "message": "Validation failed.",
                        "data": [
                            {
                                "value": "test2@test.com",
                                "msg": "Email address already exists",
                                "param": "email",
                                "location": "body"
                            }
                        ]
                    }
        '500':
          description: 'Error occured, user was not created.'
          content:
            application/json:
              example: |-
                    {
                        "message": "Error occured, user was not created."
                    }
      x-codegen-request-body-name: body
  /auth/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: login
      requestBody:
        description: login user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: test@test.com
              password: '12345'
        required: true
      responses:
        '200':
          description: User authenticated.
          content:
            application/json:
              example: |-
                        {
                            "message": "User authenticated",
                            "data": {
                                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3QxQHRlc3QuY29tIiwidXNlcklkIjoiNWVlMGNlYmU5MjI4ZDEwYTU1NDc4MGYzIiwiaWF0IjoxNTkyMTAxOTE0LCJleHAiOjE1OTIxMDU1MTR9.W5oEgLa5qLye5hS-QNQ1wwhzHBS6KXIb8VPOKyGqIa4",
                                "userId": "5ee0cebe9228d10a554780f3"
                            }
                        }
        '401':
          description: User does not exist.
          content:
            application/json:
              example: |-
                    {
                        "message": "User does not exist."
                    }
        '422':
          description: Validation failed.
          content: {}
        '500':
          description: Error occured, could not create token.
          content: 
            application/json:
              example: |-
                    {
                        "message": "Error occured, could not create token."
                    }
components:
  schemas:
    Question:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        creator:
          $ref: '#/components/schemas/User'
        vote:
          type: integer
          default: 0
        answersCount:
          type: integer
          default: 0
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        isSubscribed:
          type: boolean
          default: false
    Answer:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/Question'
        user:
          $ref: '#/components/schemas/User'
        comment:
          type: string
    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
